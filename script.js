const webhookUrl = '/.netlify/functions/get-data';
let spendChartInstance = null;

document.addEventListener('DOMContentLoaded', () => {
    Telegram.WebApp.ready();
    document.getElementById('refresh-button').addEventListener('click', loadData);
    loadData();
});

function loadData() {
    const tabsNav = document.getElementById('tabs-nav');
    tabsNav.innerHTML = '<p>–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...</p>';
    document.getElementById('tabs-content').innerHTML = '';

    fetch(webhookUrl)
        .then(response => response.json())
        .then(data => updateDashboard(Array.isArray(data) ? data : [data]))
        .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
            tabsNav.innerHTML = '<p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞.</p>';
        });
}

function updateDashboard(dataArray) {
    if (dataArray.length === 0 || !dataArray[0]) {
        document.getElementById('tabs-nav').innerHTML = '<p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p>';
        return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–∞–º–ø–∞–Ω–∏–∏
    const campaigns = dataArray.reduce((acc, item) => {
        const campaignName = item.campaignName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        if (!acc[campaignName]) {
            acc[campaignName] = [];
        }
        acc[campaignName].push(item);
        return acc;
    }, {});

    const tabsNav = document.getElementById('tabs-nav');
    const tabsContent = document.getElementById('tabs-content');
    tabsNav.innerHTML = '';
    tabsContent.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –≤–∫–ª–∞–¥–æ–∫
    const campaignNames = Object.keys(campaigns).sort();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—â—É—é –¥–∞—Ç—É –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–∞–º–æ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏ –∏–∑ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const absoluteLatestEntry = dataArray.sort((a,b) => new Date(b.dateStart) - new Date(a.dateStart))[0];
    document.getElementById('report-date').innerText = new Date(absoluteLatestEntry.reportDate).toLocaleDateString('ru-RU');

    // –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    campaignNames.forEach((campaignName, index) => {
        const campaignData = campaigns[campaignName];
        campaignData.sort((a, b) => new Date(b.dateStart) - new Date(a.dateStart));
        const latestEntry = campaignData[0]; // –°–∞–º–∞—è —Å–≤–µ–∂–∞—è –∑–∞–ø–∏—Å—å –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏

        // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É-–≤–∫–ª–∞–¥–∫—É
        const tabButton = document.createElement('button');
        tabButton.className = 'tab-button';
        tabButton.dataset.tabId = `tab-${index}`;
        tabButton.innerText = campaignName;
        tabsNav.appendChild(tabButton);

        // –°–æ–∑–¥–∞–µ–º –ø–∞–Ω–µ–ª—å —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
        const tabContent = document.createElement('div');
        tabContent.className = 'tab-content';
        tabContent.id = `tab-${index}`;
        tabContent.innerHTML = `
            <section class="metrics">
                <div class="card"><h2>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ</h2><p><span>${parseFloat(latestEntry.spend || 0).toFixed(2)}</span> $</p></div>
                <div class="card"><h2>–ö–ª–∏–∫–∏</h2><p>${latestEntry.clicks || 0}</p></div>
                <div class="card"><h2>CTR</h2><p><span>${parseFloat(latestEntry.ctr || 0).toFixed(2)}</span> %</p></div>
                <div class="card"><h2>CPC</h2><p><span>${parseFloat(latestEntry.cpc || 0).toFixed(2)}</span> $</p></div>
            </section>
            <section class="ai-analysis">
                <h2>ü§ñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –æ—Ç AI</h2>
                <p>${latestEntry.aiAnalysis || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö."}</p>
            </section>
            <section class="chart-container">
                <h2>–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ (7 –¥–Ω–µ–π)</h2>
                <canvas id="chart-${index}"></canvas>
            </section>
        `;
        tabsContent.appendChild(tabContent);

        // –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —ç—Ç–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        renderChart(`chart-${index}`, campaignData);

        tabButton.addEventListener('click', () => {
            document.querySelectorAll('.tab-button').forEach(btn => btn.classList.remove('active'));
            document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
            tabButton.classList.add('active');
            tabContent.classList.add('active');
        });
    });

    if (tabsNav.children.length > 0) {
        tabsNav.children[0].click();
    }
}

function renderChart(canvasId, historyData) {
    const ctx = document.getElementById(canvasId).getContext('2d');
    historyData.sort((a, b) => new Date(a.dateStart) - new Date(b.dateStart));
    
    const labels = historyData.map(item => new Date(item.dateStart).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' }));
    const dataPoints = historyData.map(item => parseFloat(item.spend || 0));

    new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: '–ü–æ—Ç—Ä–∞—á–µ–Ω–æ ($)',
                data: dataPoints,
                fill: true,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0.1,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
            }]
        },
        options: { responsive: true, scales: { y: { beginAtZero: true } } }
    });
}